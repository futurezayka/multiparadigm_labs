generate_alphabet(n) := block(
    [chars],
    chars : makelist(ascii(charlist("A")[1] + i - 1), i, 0, n - 1),
    return(chars)
)$

get_intervals_uniform(series, n) := block(
    [minval, maxval, step],
    minval : lmin(series),
    maxval : lmax(series),
    step : (maxval - minval) / n,
    makelist(minval + i * step, i, 0, n)
)$

find_interval(v, breaks) := block(
    [i],
    for i:1 thru length(breaks) - 1 do (
        if v >= breaks[i] and v =< breaks[i + 1] then return(i)
    ),
    return(length(breaks) - 1)
)$

map_to_alphabet(series, breaks, alphabet) := block(
    [letters, idx],
    letters : [],
    for v in series do (
        idx : find_interval(v, breaks),
        letters : endcons(alphabet[idx], letters)
    ),
    return(letters)
)$

position(val, list) := block(
    [i],
    for i:1 thru length(list) do (
        if list[i] = val then return(i)
    ),
    return(false)
)$

build_transition_matrix(symbols, alphabet) := block(
    [n, matrix, i, idx1, idx2],
    n : length(alphabet),
    matrix : genmatrix(lambda([i,j], 0), n, n),
    for i:1 thru length(symbols) - 1 do (
        idx1 : position(symbols[i], alphabet),
        idx2 : position(symbols[i+1], alphabet),
        if idx1 # false and idx2 # false then (
            matrix[idx1][idx2] : matrix[idx1][idx2] + 1
        )
    ),
    return(matrix)
)$

print_ling_series(series) := block(
    print("Лінгвістичний ряд:"),
    print(series)
)$

print_matrix(matrix, alphabet) := block(
    [i, j],
    print("Матриця передування:"),
    printf(true, "    "),
    for c in alphabet do printf(true, " ~a ", c),
    print(""),
    for i:1 thru length(alphabet) do (
        printf(true, "~a ", alphabet[i]),
        for j:1 thru length(alphabet) do (
            printf(true, " ~d ", matrix[i][j])
        ),
        print("")
    )
)$

run(series, alpha_size) := block(
    [alphabet, breaks, ling_series, matrix],
    alphabet : generate_alphabet(alpha_size),
    breaks : get_intervals_uniform(series, alpha_size),
    ling_series : map_to_alphabet(series, breaks, alphabet),
    matrix : build_transition_matrix(ling_series, alphabet),
    print_ling_series(ling_series),
    print_matrix(matrix, alphabet)
)$

series : [10, 12, 15, 14, 17, 19, 20, 23, 25, 24]$
run(series, 4)$
